/* ============================================================
   STORED PROCEDURE: sp_RegisterUser
   PURPOSE: Register new user and generate OTP for verification
   ============================================================ */
 ALTER PROCEDURE sp_RegisterUser
    @Username NVARCHAR(150),
    @Password NVARCHAR(200),
    @FullName NVARCHAR(200),
    @Email NVARCHAR(255),
    @Phone NVARCHAR(20),
    @Role NVARCHAR(50),
    @BusinessName NVARCHAR(255) = NULL,
    @BusinessType NVARCHAR(50) = NULL,
    @GSTNumber NVARCHAR(20) = NULL,
    @Address NVARCHAR(500) = NULL,
    @Landmark NVARCHAR(200) = NULL,
    @City NVARCHAR(100) = NULL,
    @State NVARCHAR(100) = NULL,
    @Country NVARCHAR(100) = 'India',
    @Pincode NVARCHAR(10) = NULL,

    @Result INT OUTPUT,
    @OutLoginId INT OUTPUT,
    @OutOtp NVARCHAR(10) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;

    -- Validation
    IF EXISTS (SELECT 1 FROM UserLogins WHERE Username = @Username)
    BEGIN
        SET @Result = -1; RETURN;
    END

    IF EXISTS (SELECT 1 FROM Users WHERE PrimaryEmail = @Email)
    BEGIN
        SET @Result = -2; RETURN;
    END

    BEGIN TRANSACTION;
    BEGIN TRY
        -- Hash Password
        DECLARE @HashHex NVARCHAR(128) = CONVERT(NVARCHAR(128), HASHBYTES('SHA2_512', @Password), 2);

        INSERT INTO UserLogins (Username, PasswordHash, IsActive, CreatedAt)
        VALUES (@Username, @HashHex, 1, GETDATE());

        SET @OutLoginId = SCOPE_IDENTITY();

        INSERT INTO Users (LoginId, FullName, PrimaryEmail, PrimaryPhone, Role, IsVerified, CreatedAt, IsActive)
        VALUES (@OutLoginId, @FullName, @Email, @Phone, @Role, 0, GETDATE(), 1);

        DECLARE @UserId INT = SCOPE_IDENTITY();

        IF @Role IN ('Seller','Manufacturer','Wholesaler')
        BEGIN
            INSERT INTO BusinessProfiles (UserId, BusinessName, BusinessType, GSTNumber, Address, Landmark, City, State, Country, Pincode, IsVerified, CreatedAt, IsActive)
            VALUES (@UserId, @BusinessName, @BusinessType, @GSTNumber, @Address, @Landmark, @City, @State, @Country, @Pincode, 0, GETDATE(), 1);
        END

        -- Generate OTP (numeric 6 digits)
        DECLARE @Otp NVARCHAR(10) = CONVERT(NVARCHAR(10), ABS(CHECKSUM(NEWID())) % 900000 + 100000);
        DECLARE @Expires DATETIME2 = DATEADD(MINUTE, 30, GETDATE());

        INSERT INTO UserOtps (LoginId, OtpCode, Purpose, ExpiresAt, IsUsed, EmailSent, CreatedAt)
        VALUES (@OutLoginId, @Otp, 'Registration', @Expires, 0, 0, GETDATE());

        SET @OutOtp = @Otp;
        SET @Result = 1;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF XACT_STATE() <> 0 ROLLBACK TRANSACTION;
        SET @Result = -9;
    END CATCH
END
GO

/* ============================================================
   STORED PROCEDURE: sp_VerifyRegistrationOtp
   PURPOSE: Verify OTP and mark user/business as verified
   ============================================================ */
ALTER PROCEDURE sp_VerifyRegistrationOtp
    @Username NVARCHAR(150),
    @OtpCode NVARCHAR(10),
    @Result INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;

    DECLARE @LoginId INT = (SELECT LoginId FROM UserLogins WHERE Username = @Username);
    IF @LoginId IS NULL
    BEGIN
        SET @Result = -1; RETURN;
    END

    DECLARE @ValidOtpId INT = (
        SELECT TOP 1 OtpId
        FROM UserOtps
        WHERE LoginId = @LoginId
          AND Purpose = 'Registration'
          AND IsUsed = 0
          AND ExpiresAt >= GETDATE()
          AND UPPER(LTRIM(RTRIM(OtpCode))) = UPPER(LTRIM(RTRIM(@OtpCode)))
        ORDER BY CreatedAt DESC
    );

    IF @ValidOtpId IS NULL
    BEGIN
        SET @Result = -2; RETURN;
    END

    BEGIN TRANSACTION;
    BEGIN TRY
        UPDATE UserOtps SET IsUsed = 1, EmailSent = 1 WHERE OtpId = @ValidOtpId;

        UPDATE Users SET IsVerified = 1, UpdatedAt = GETDATE() WHERE LoginId = @LoginId;
        UPDATE BusinessProfiles SET IsVerified = 1, UpdatedAt = GETDATE()
        WHERE UserId = (SELECT UserId FROM Users WHERE LoginId = @LoginId);

        SET @Result = 1;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF XACT_STATE() <> 0 ROLLBACK TRANSACTION;
        SET @Result = -9;
    END CATCH
END
GO

/* ============================================================
   STORED PROCEDURE: sp_RequestPasswordReset
   PURPOSE: Generate OTP for password reset and email it
   ============================================================ */
ALTER PROCEDURE sp_RequestPasswordReset
    @Username NVARCHAR(150),
    @Result INT OUTPUT,
    @OutOtp NVARCHAR(10) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;

    DECLARE @LoginId INT = (SELECT LoginId FROM UserLogins WHERE Username = @Username);
    IF @LoginId IS NULL
    BEGIN
        SET @Result = -1; RETURN;
    END

    BEGIN TRANSACTION;
    BEGIN TRY
        DECLARE @Otp NVARCHAR(10) = CONVERT(NVARCHAR(10), ABS(CHECKSUM(NEWID())) % 900000 + 100000);
        DECLARE @Expires DATETIME2 = DATEADD(MINUTE, 30, GETDATE());

        INSERT INTO UserOtps (LoginId, OtpCode, Purpose, ExpiresAt, IsUsed, EmailSent, CreatedAt)
        VALUES (@LoginId, @Otp, 'PasswordReset', @Expires, 0, 0, GETDATE());

        SET @OutOtp = @Otp;
        SET @Result = 1;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF XACT_STATE() <> 0 ROLLBACK TRANSACTION;
        SET @Result = -9;
    END CATCH
END
GO

/* ============================================================
   STORED PROCEDURE: sp_ResetPassword
   PURPOSE: Reset password using verified OTP
   ============================================================ */
Alter PROCEDURE sp_ResetPassword
    @Username NVARCHAR(150),
    @Password NVARCHAR(200),
    @OtpCode NVARCHAR(10),
    @Result INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;

    DECLARE @LoginId INT = (SELECT LoginId FROM UserLogins WHERE Username = @Username);
    IF @LoginId IS NULL
    BEGIN
        SET @Result = -1; RETURN;
    END

    IF NOT EXISTS (
        SELECT 1 FROM UserOtps 
        WHERE LoginId = @LoginId 
          AND Purpose = 'PasswordReset' 
          AND IsUsed = 0 
          AND ExpiresAt >= GETDATE()
          AND UPPER(LTRIM(RTRIM(OtpCode))) = UPPER(LTRIM(RTRIM(@OtpCode)))
    )
    BEGIN
        SET @Result = -2; RETURN;
    END

    BEGIN TRANSACTION;
    BEGIN TRY
        DECLARE @HashHex NVARCHAR(128) = CONVERT(NVARCHAR(128), HASHBYTES('SHA2_512', @Password), 2);

        UPDATE UserLogins SET PasswordHash = @HashHex, UpdatedAt = GETDATE() WHERE LoginId = @LoginId;
        UPDATE UserOtps SET IsUsed = 1 WHERE LoginId = @LoginId AND Purpose = 'PasswordReset' AND OtpCode = @OtpCode;

        SET @Result = 1;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF XACT_STATE() <> 0 ROLLBACK TRANSACTION;
        SET @Result = -9;
    END CATCH
END
GO

Create PROCEDURE sp_LoginUser
    @Username NVARCHAR(150),
    @Password NVARCHAR(200),
    @Result INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @HashHex NVARCHAR(128) = CONVERT(NVARCHAR(128), HASHBYTES('SHA2_512', @Password), 2);
    DECLARE @LoginId INT;

    SELECT @LoginId = LoginId
    FROM UserLogins
    WHERE Username = @Username AND PasswordHash = @HashHex AND IsActive = 1;

    IF @LoginId IS NULL
    BEGIN
        SET @Result = -1; -- Invalid username/password
        RETURN;
    END

    IF EXISTS(SELECT 1 FROM Users WHERE LoginId = @LoginId AND IsVerified = 0)
    BEGIN
        SET @Result = -2; -- Not verified
        RETURN;
    END

    SET @Result = 1;

    SELECT 
        u.UserId,
        ul.LoginId,
        ul.Username,
        u.FullName,
        u.PrimaryEmail,
        u.PrimaryPhone,
        u.Role,
        bp.BusinessName,
        bp.BusinessType,
        bp.GSTNumber,
        bp.City,
        bp.State,
        bp.Pincode
    FROM Users u
    JOIN UserLogins ul ON u.LoginId = ul.LoginId
    LEFT JOIN BusinessProfiles bp ON bp.UserId = u.UserId
    WHERE ul.LoginId = @LoginId;
END
GO




